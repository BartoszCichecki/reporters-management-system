
exceptions.badRequestExceptions.badJson                            = Error in submitted JSON!
exceptions.badRequestExceptions.cantGetRequestBody                 = Can't get request body!
exceptions.badRequestExceptions.cantRegisterNothing                = You can't register "nothing".
exceptions.badRequestExceptions.cantUpdateNothing                  = You can't update "nothing".
exceptions.badRequestExceptions.fromAndTillDateMissing             = You must provide from date and till date!
exceptions.badRequestExceptions.requestBodyHashFail                = Request body hash check failed!
exceptions.internalServerError                                     = Internal Server Error
exceptions.serverError                                             = Internal server error
exceptions.serviceExceptions.accessHistory.notExistsId             = Access history entry with this ID does not exist!
exceptions.serviceExceptions.devices.cantDeleteNotExisting         = You can't delete device that does not exist!
exceptions.serviceExceptions.devices.cantUpdateNotExisting         = You can't update device that does not exist!
exceptions.serviceExceptions.devices.duplicateName                 = Device with such name already exist! Devices must have unique names.
exceptions.serviceExceptions.devices.notExistId                    = Device with this ID does not exist!
exceptions.serviceExceptions.devices.notExistName                  = Device with this name does not exist!
exceptions.serviceExceptions.email.configError                     = Could not configure email.
exceptions.serviceExceptions.email.sendingError                    = Could not send email.
exceptions.serviceExceptions.events.cantDeleteNotExisting          = You can't delete event that does not exist!
exceptions.serviceExceptions.events.cantUpdateNotExisting          = You can't update event that does not exist!
exceptions.serviceExceptions.events.duplicateEvent                 = Could not create duplicate event!
exceptions.serviceExceptions.events.notExistId                     = Event with this ID does not exist!
exceptions.serviceExceptions.general.fromAfterTill                 = Date "from" must be before "till"!
exceptions.serviceExceptions.messages.cantDeleteNotExisting        = You can't delete message that does not exist!
exceptions.serviceExceptions.messages.noContent                    = You must provide message content.
exceptions.serviceExceptions.messages.noSubject                    = You must provide message subject.
exceptions.serviceExceptions.messages.notExistsId                  = Message with this ID does not exist!
exceptions.serviceExceptions.roles.cantDeleteNotExisting           = You can't delete role that does not exist!
exceptions.serviceExceptions.roles.cantDeleteStillAssigned         = Can't delete role that is assigned to user(s)!
exceptions.serviceExceptions.roles.cantUpdateNotExisting           = You can't update role that does not exist!
exceptions.serviceExceptions.roles.duplicateName                   = Role with such name already exist! Roles must have unique names.
exceptions.serviceExceptions.roles.notExistId                      = Role with this ID does not exist!
exceptions.serviceExceptions.roles.notExistName                    = Role with this name does not exist!
exceptions.serviceExceptions.users.cantDeleteNotExisting           = You can't delete user that does not exist!
exceptions.serviceExceptions.users.cantUpdateNotExisting           = You can't update user that does not exist!
exceptions.serviceExceptions.users.duplicateEmail                  = User with such username already exist! Users must have unique usernames.
exceptions.serviceExceptions.users.duplicateUsername               = User with such email already exist! Users must have unique emails.
exceptions.serviceExceptions.users.mustHaveEmail                   = User must have at least one email address.
exceptions.serviceExceptions.users.notExistId                      = User with this ID does not exist!
exceptions.serviceExceptions.users.notExistUsername                = User with this username does not exist!
exceptions.serviceExceptions.users.registration.missingAddressData = You must provide address data while creating account. At least one email address is required.

notifications.passwordReminder.content = A new password has been requested for your account. Your new password is: {0}. You can change this password later.
notifications.passwordReminder.title   = Password reminder
